version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
  
  pre_build:
    commands:
      - echo "Checking which components changed..."
      # Get the previous commit hash (last successful build)
      - PREVIOUS_COMMIT=$(aws codepipeline get-pipeline-state --name $CODEPIPELINE_NAME | jq -r '.stageStates[0].actionStates[0].currentRevision.revisionId')
      - echo "Previous commit: $PREVIOUS_COMMIT"
      - echo "Current commit: $CODEBUILD_RESOLVED_SOURCE_VERSION"
      # If this is the first build, compare with the first commit
      - if [ -z "$PREVIOUS_COMMIT" ]; then PREVIOUS_COMMIT=$(git rev-list --max-parents=0 HEAD); fi
      - CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT $CODEBUILD_RESOLVED_SOURCE_VERSION || echo "all")
      - LAMBDA_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^lambda/" && echo "true" || echo "false")
      - EC2_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^ec2-app/" && echo "true" || echo "false")
      - echo "Lambda changed: $LAMBDA_CHANGED"
      - echo "EC2 changed: $EC2_CHANGED"
  
  build:
    commands:
      # Add build commands if needed for your specific project
      - if [ "$LAMBDA_CHANGED" = "true" ]; then echo "Building Lambda code..."; fi
      - if [ "$EC2_CHANGED" = "true" ]; then echo "Building EC2 code..."; fi
  
  post_build:
    commands:
      - echo "Creating deployment artifacts..."
      - mkdir -p artifacts
      - if [ "$LAMBDA_CHANGED" = "true" ]; then echo "Packaging Lambda code..."; mkdir -p artifacts/lambda; cd lambda/src; zip -r ../../artifacts/lambda/function.zip .; cd ../..; echo '{"lambda": true}' > artifacts/deploy-config.json; fi
      - if [ "$EC2_CHANGED" = "true" ]; then echo "Packaging EC2 code..."; mkdir -p artifacts/ec2-app; cp -r ec2-app/* artifacts/ec2-app/; cp appspec.yml artifacts/; echo '{"ec2": true}' > artifacts/deploy-config.json; fi

artifacts:
  files:
    - artifacts/**/*
    - appspec.yml
    - deploy-config.json
    - lambda-deploy.sh
    - lambda-buildspec.yml
  discard-paths: no
